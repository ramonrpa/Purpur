From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ramonrpa <ramon.rpa2018@gmail.com>
Date: Mon, 22 Feb 2021 10:52:22 -0300
Subject: [PATCH] Add Accessories Slot


diff --git a/src/main/java/net/minecraft/server/ContainerPlayer.java b/src/main/java/net/minecraft/server/ContainerPlayer.java
index 7695c1777390e86076dc0ae226d0ebdc7c0c5d14..83c6dd348c7047261dc7d1ec3636754988a4282f 100644
--- a/src/main/java/net/minecraft/server/ContainerPlayer.java
+++ b/src/main/java/net/minecraft/server/ContainerPlayer.java
@@ -14,6 +14,9 @@ public class ContainerPlayer extends ContainerRecipeBook<InventoryCrafting> {
     public static final MinecraftKey g = new MinecraftKey("item/empty_armor_slot_boots");
     public static final MinecraftKey h = new MinecraftKey("item/empty_armor_slot_shield");
     public static final MinecraftKey hi = new MinecraftKey("item/empty_armor_slot_backtool");
+    public static final MinecraftKey hj = new MinecraftKey("item/empty_ring_slot");
+    public static final MinecraftKey hk = new MinecraftKey("item/empty_amulet_slot");
+    public static final MinecraftKey hl = new MinecraftKey("item/empty_artifact_slot");
     private static final MinecraftKey[] j = new MinecraftKey[]{ContainerPlayer.g, ContainerPlayer.f, ContainerPlayer.e, ContainerPlayer.d};
     private static final EnumItemSlot[] k = new EnumItemSlot[]{EnumItemSlot.HEAD, EnumItemSlot.CHEST, EnumItemSlot.LEGS, EnumItemSlot.FEET};
     // CraftBukkit start
@@ -82,8 +85,7 @@ public class ContainerPlayer extends ContainerRecipeBook<InventoryCrafting> {
             this.a(new Slot(playerinventory, i, 115 + i * 22, 149));
         }
 
-        this.a(new Slot(playerinventory, 40, 17, 149) {
-        });
+        this.a(new Slot(playerinventory, 40, 16, 149));
 
         this.a(new Slot(playerinventory, 41, 71, 149) {
             @Override
@@ -99,6 +101,10 @@ public class ContainerPlayer extends ContainerRecipeBook<InventoryCrafting> {
                         itemstack.getItem() instanceof ItemTrident);
             }
         });
+
+        for (int k = 0; k < 4; ++k){
+            this.a(new Slot(playerinventory, 42 + k, 79, (k > 1 ? 27 : 26) + k * 29));
+        }
     }
 
     @Override
diff --git a/src/main/java/net/minecraft/server/PlayerInventory.java b/src/main/java/net/minecraft/server/PlayerInventory.java
index e050e8dd2c9feb63542a985ab45340cfa2d7d76e..c74e7974eb3e22a4315b8d1979fe5bac149d183e 100644
--- a/src/main/java/net/minecraft/server/PlayerInventory.java
+++ b/src/main/java/net/minecraft/server/PlayerInventory.java
@@ -18,6 +18,7 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
     public final NonNullList<ItemStack> armor;
     public final NonNullList<ItemStack> extraSlots;
     public final NonNullList<ItemStack> backTool;
+    public final NonNullList<ItemStack> accessories;
     private final List<NonNullList<ItemStack>> f;List<NonNullList<ItemStack>> getComponents() { return f; } // Paper - OBFHELPER
     public int itemInHandIndex;
     public final EntityHuman player;
@@ -29,7 +30,7 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
     private int maxStack = MAX_STACK;
 
     public List<ItemStack> getContents() {
-        List<ItemStack> combined = new ArrayList<ItemStack>(items.size() + armor.size() + extraSlots.size() + backTool.size());
+        List<ItemStack> combined = new ArrayList<ItemStack>(items.size() + armor.size() + extraSlots.size() + backTool.size() + accessories.size());
         for (List<net.minecraft.server.ItemStack> sub : this.f) {
             combined.addAll(sub);
         }
@@ -77,7 +78,8 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
         this.armor = NonNullList.a(4, ItemStack.b);
         this.extraSlots = NonNullList.a(1, ItemStack.b);
         this.backTool = NonNullList.a(1, ItemStack.b);
-        this.f = ImmutableList.of(this.items, this.armor, this.extraSlots, this.backTool);
+        this.accessories = NonNullList.a(4, ItemStack.b);
+        this.f = ImmutableList.of(this.items, this.armor, this.extraSlots, this.backTool, this.accessories);
         this.carried = ItemStack.b;
         this.player = entityhuman;
     }
@@ -467,6 +469,15 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
             }
         }
 
+        for (i = 0; i < this.accessories.size(); i++) {
+            if (!((ItemStack) this.accessories.get(i)).isEmpty()) {
+                nbttagcompound = new NBTTagCompound();
+                nbttagcompound.setByte("Slot", (byte) (i + 157));
+                ((ItemStack) this.accessories.get(i)).save(nbttagcompound);
+                nbttaglist.add(nbttagcompound);
+            }
+        }
+
         return nbttaglist;
     }
 
@@ -475,6 +486,7 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
         this.armor.clear();
         this.extraSlots.clear();
         this.backTool.clear();
+        this.accessories.clear();
 
         for (int i = 0; i < nbttaglist.size(); ++i) {
             NBTTagCompound nbttagcompound = nbttaglist.getCompound(i);
@@ -490,6 +502,8 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
                     this.extraSlots.set(j - 150, itemstack);
                 } else if (j >= 155 && j < this.backTool.size() + 155) {
                     this.backTool.set(j - 155, itemstack);
+                } else if (j >= 157 && j < this.accessories.size() + 157) {
+                    this.accessories.set(j - 157, itemstack);
                 }
             }
         }
@@ -498,7 +512,7 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
 
     @Override
     public int getSize() {
-        return this.items.size() + this.armor.size() + this.extraSlots.size() + this.backTool.size();
+        return this.items.size() + this.armor.size() + this.extraSlots.size() + this.backTool.size() + this.accessories.size();
     }
 
     @Override
@@ -521,6 +535,16 @@ public class PlayerInventory implements IInventory, INamableTileEntity {
 
                                 do {
                                     if (!iterator.hasNext()) {
+                                        iterator = this.accessories.iterator();
+
+                                        do {
+                                            if (!iterator.hasNext()) {
+                                                return true;
+                                            }
+
+                                            itemstack = (ItemStack) iterator.next();
+                                        } while (itemstack.isEmpty());
+
                                         return true;
                                     }
 
